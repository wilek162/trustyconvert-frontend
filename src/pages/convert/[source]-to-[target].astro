---
import MainLayout from '@/layouts/MainLayout.astro'
import { mockFormats } from '@/mocks/data'

// Define types for the mock data
type MockFormat = {
	id: string
	name: string
	inputFormats: string[]
	outputFormats: string[]
	maxSize: number
	features?: string[]
	extensions?: string[]
	mimeTypes?: string[]
	canConvertTo?: string[]
	icon?: string
}

export async function getStaticPaths() {
	// Use mock data instead of fetching from API
	const formats = mockFormats as MockFormat[]

	// Create paths for each source-target format combination
	return formats.flatMap((format) =>
		format.outputFormats.map((targetFormat) => ({
			params: {
				source: format.id,
				target: targetFormat
			},
			props: {
				title: `Convert ${format.id.toUpperCase()} to ${targetFormat.toUpperCase()} - Free Online Converter`,
				description: `Convert your ${format.id.toUpperCase()} files to ${targetFormat.toUpperCase()} format online. Fast, secure, and free file conversion with TrustyConvert.`,
				sourceFormat: format.id,
				targetFormat,
				formatInfo: format
			}
		}))
	)
}

const { source, target } = Astro.params
const { title, description, sourceFormat, targetFormat, formatInfo } = Astro.props

const alternateLanguages = [{ code: 'en', name: 'English' }]
---

<MainLayout title={title} description={description} alternateLanguages={alternateLanguages}>
	<div class="container mx-auto px-4 py-12">
		<h1 class="mb-8 text-center text-4xl font-bold">
			Convert {source?.toUpperCase()} to {target?.toUpperCase()}
		</h1>
		<div class="mx-auto max-w-xl">
			<div class="rounded-lg border border-border bg-card p-6 text-center">
				<p class="mb-4">This is a demo page for the conversion route.</p>
				<p class="mb-4">Source format: {sourceFormat}</p>
				<p class="mb-4">Target format: {targetFormat}</p>
				<a href="/" class="btn btn-primary">Go to Home</a>
			</div>
		</div>
	</div>
</MainLayout>
