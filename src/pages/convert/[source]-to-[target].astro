---
import MainLayout from '@/layouts/mainLayout.astro'
import {
	ConversionFlow,
	ConversionPageFeatures,
	RelatedConversionsPanel
} from '@/components/features/conversion'
import { SupportedFormats } from '@/components/SupportedFormats'
import { FAQ } from '@/components/FAQ'
import ConversionSteps from '@/components/features/conversion/ConversionSteps.astro'

// Import format service and SEO utilities
import formatService, {
	getAllFormats,
	getFormatById,
	getRelatedConversions
} from '@/lib/services/formatService'
import seoUtils from '@/lib/utils/seoUtils'
import { t } from '@/lib/i18n/translations'
import { getAlternateLanguages } from '@/lib/i18n/middleware'
import { DEFAULT_LANGUAGE, LANGUAGES } from '@/lib/i18n/config'

// Get the current language
const currentLang = DEFAULT_LANGUAGE.code

export async function getStaticPaths() {
	// Check if we're in static mode
	const isStaticMode = import.meta.env.OUTPUT === 'static'

	// Get all formats from service
	const formats = await getAllFormats(false, isStaticMode)

	// Log the formats to debug
	console.log(`[getStaticPaths] Got ${formats.length} formats for static paths generation`)

	// Ensure formats are valid
	if (!formats || formats.length === 0) {
		console.warn('[getStaticPaths] No formats found, using mock data')
		// Use mock data as fallback
		const paths = []

		// @ts-ignore - TypeScript doesn't recognize the MOCK_FORMATS property
		for (const format of formatService.MOCK_FORMATS) {
			if (!format.outputFormats || !Array.isArray(format.outputFormats)) continue

			for (const targetFormatId of format.outputFormats) {
				// Find target format info
				// @ts-ignore - TypeScript doesn't recognize the MOCK_FORMATS property
				const targetFormat = formatService.MOCK_FORMATS.find((f) => f.id === targetFormatId)

				// Generate standard conversion features
				const conversionFeatures = seoUtils.generateConversionFeatures(
					format,
					targetFormat || targetFormatId,
					DEFAULT_LANGUAGE.code
				)

				// Generate SEO metadata
				const title = seoUtils.generateConversionTitle(
					format,
					targetFormat || targetFormatId,
					DEFAULT_LANGUAGE.code
				)

				const description = seoUtils.generateConversionDescription(
					format,
					targetFormat || targetFormatId,
					DEFAULT_LANGUAGE.code
				)

				paths.push({
					params: {
						source: format.id,
						target: targetFormatId
					},
					props: {
						title,
						description,
						sourceFormat: format.id,
						targetFormat: targetFormatId,
						sourceFormatInfo: format,
						targetFormatInfo: targetFormat || null,
						conversionFeatures,
						// @ts-ignore - TypeScript doesn't recognize the MOCK_FORMATS property
						allFormats: formatService.MOCK_FORMATS
					}
				})
			}
		}

		return paths
	}

	// Create paths for each source-target format combination
	const paths = []

	for (const format of formats) {
		// Ensure format has outputFormats
		if (!format.outputFormats || !Array.isArray(format.outputFormats)) {
			console.warn(`[getStaticPaths] Format ${format.id} has no outputFormats, skipping`)
			continue
		}

		for (const targetFormatId of format.outputFormats) {
			// Find target format info
			const targetFormat = formats.find((f) => f.id === targetFormatId)

			// Generate standard conversion features
			const conversionFeatures = seoUtils.generateConversionFeatures(
				format,
				targetFormat || targetFormatId,
				DEFAULT_LANGUAGE.code
			)

			// Generate SEO metadata
			const title = seoUtils.generateConversionTitle(
				format,
				targetFormat || targetFormatId,
				DEFAULT_LANGUAGE.code
			)

			const description = seoUtils.generateConversionDescription(
				format,
				targetFormat || targetFormatId,
				DEFAULT_LANGUAGE.code
			)

			paths.push({
				params: {
					source: format.id,
					target: targetFormatId
				},
				props: {
					title,
					description,
					sourceFormat: format.id,
					targetFormat: targetFormatId,
					sourceFormatInfo: format,
					targetFormatInfo: targetFormat || null,
					conversionFeatures,
					allFormats: formats
				}
			})
		}
	}

	return paths
}

const { source, target } = Astro.params
const {
	title,
	description,
	sourceFormat,
	targetFormat,
	sourceFormatInfo,
	targetFormatInfo,
	conversionFeatures,
	allFormats
} = Astro.props

// Generate structured data for better SEO
const structuredData = seoUtils.generateConversionStructuredData(
	sourceFormatInfo || sourceFormat,
	targetFormatInfo || targetFormat,
	description
)

// Get alternate language URLs
const alternateLanguages = LANGUAGES.map((lang) => ({
	code: lang.code,
	name: lang.name,
	url: `${Astro.url.origin}/${lang.code !== DEFAULT_LANGUAGE.code ? lang.code + '/' : ''}convert/${sourceFormat}-to-${targetFormat}`
}))

// Get related conversions (other formats that can be converted to the target format)
const relatedConversions = getRelatedConversions(targetFormat, sourceFormat, 4, allFormats)
---

<MainLayout
	title={title}
	description={description}
	alternateLanguages={alternateLanguages}
	extraStructuredData={structuredData}
	lang={currentLang}
>
	<div class="bg-gradient-to-b from-white to-lightGray/20 py-8 md:py-12">
		<div class="container mx-auto px-4">
			<div class="mb-8 text-center">
				<h1 class="text-3xl font-bold text-deepNavy md:text-4xl">
					{t('convert', currentLang)}
					{sourceFormatInfo?.name || source?.toUpperCase()}
					{t('to', currentLang)}
					{targetFormatInfo?.name || target?.toUpperCase()}
				</h1>
				<p class="mt-3 text-lg text-muted-foreground">
					{t('fast_secure_free', currentLang)}
				</p>
			</div>

			<div class="mx-auto max-w-screen-xl">
				<div class="grid gap-6 md:grid-cols-12">
					<!-- Sidebar with features - shown only on larger screens -->
					<div class="hidden md:col-span-3 md:block lg:col-span-3">
						<ConversionPageFeatures
							client:load
							sourceFormat={sourceFormat}
							targetFormat={targetFormat}
						/>
					</div>

					<!-- Main conversion area - centered and prominent -->
					<div class="md:col-span-6 lg:col-span-6">
						<div class="rounded-xl border border-border bg-white p-6 shadow-md">
							<ConversionFlow
								client:load
								initialSourceFormat={sourceFormat}
								initialTargetFormat={targetFormat}
							/>
						</div>
					</div>

					<!-- Related conversions sidebar -->
					<div class="md:col-span-3 lg:col-span-3">
						<RelatedConversionsPanel
							client:load
							relatedFormats={relatedConversions}
							targetFormat={targetFormat}
							targetFormatName={targetFormatInfo?.name}
						/>

						<!-- Features shown on mobile only -->
						<div class="mt-6 md:hidden">
							<ConversionPageFeatures
								client:load
								sourceFormat={sourceFormat}
								targetFormat={targetFormat}
							/>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Conversion steps section -->
	<div class="bg-white py-12">
		<div class="container mx-auto px-4">
			<ConversionSteps
				sourceFormat={sourceFormat}
				targetFormat={targetFormat}
				sourceName={sourceFormatInfo?.name}
				targetName={targetFormatInfo?.name}
			/>
		</div>
	</div>

	<!-- Additional sections -->
	<div class="bg-lightGray/20 py-12">
		<div class="container mx-auto px-4">
			<SupportedFormats />
		</div>
	</div>

	<div class="bg-white py-12">
		<div class="container mx-auto px-4">
			<FAQ />
		</div>
	</div>
</MainLayout>
