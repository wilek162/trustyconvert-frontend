---
// src/pages/index.astro
import { Check, Lock, Zap } from '@lucide/astro'

import { ConversionFlow } from '@/components/features/conversion'
import type { ConversionFormat } from '@/lib/types/api'
import { mockFormats } from '@/mocks/data'

import { AppProviders } from '@/components/providers/AppProviders'
import MainLayout from '@/layouts/MainLayout.astro'
import { Hero } from '@/components/Hero'
import { HowItWorks } from '@/components/HowItWorks'
import { Features } from '@/components/Features'
import { FAQ } from '@/components/FAQ'
import { SupportedFormats } from '@/components/SupportedFormats'
import { Testimonials } from '@/components/Testimonials'

// SEO and structured data
const title = 'TrustyConvert - Fast & Secure File Conversion'
const description =
	'Convert your files quickly with our secure, private file conversion tool. No registration required.'

// Structured data for better SEO
const structuredData = {
	'@context': 'https://schema.org',
	'@type': 'WebApplication',
	name: 'TrustyConvert',
	url: Astro.url.href,
	description: description,
	applicationCategory: 'UtilityApplication',
	operatingSystem: 'All'
}

// Fetch supported formats for the dropdown
let formats: ConversionFormat[] = []

if (import.meta.env.DEV) {
	// Use mock data in development with appropriate type conversion
	formats = mockFormats.map((mock) => ({
		id: mock.id,
		name: mock.name,
		description: mock.name, // Use name as description
		input_formats: mock.inputFormats,
		output_formats: mock.outputFormats,
		icon: mock.icon
	}))
} else {
	try {
		const response = await fetch(
			`${import.meta.env.PUBLIC_API_URL || '/api'}/supported-conversions`,
			{
				headers: {
					Accept: 'application/json'
				}
			}
		)
		const data = await response.json()
		formats = data.data
	} catch (error) {
		console.error('Failed to fetch formats:', error)
		// Fallback to mock data if fetch fails with appropriate type conversion
		formats = mockFormats.map((mock) => ({
			id: mock.id,
			name: mock.name,
			description: mock.name, // Use name as description
			input_formats: mock.inputFormats,
			output_formats: mock.outputFormats,
			icon: mock.icon
		}))
	}
}

// Generate alternate language links
const alternateLanguages = [
	{ code: 'en', name: 'English' },
	{ code: 'es', name: 'Español' },
	{ code: 'fr', name: 'Français' },
	{ code: 'de', name: 'Deutsch' }
]
---

<MainLayout title={title} description={description} extraStructuredData={structuredData}>
	<div class="bg-gradient-to-b from-white to-lightGray/20">
		<div id="convert" class="scroll-mt-24">
			<Hero client:load />
		</div>

		<HowItWorks />
	</div>

	<Features />

	<SupportedFormats />

	<Testimonials />

	<FAQ />
</MainLayout>

<style is:global>
	/* Add loading state styles */
	.file-upload-loading {
		opacity: 0.7;
		pointer-events: none;
	}

	/* Custom card styling */
	.trusty-card {
		@apply rounded-xl border border-trustTeal/20 bg-white p-8 shadow-md transition-all duration-300;
	}

	/* Section styling */
	.trusty-section {
		@apply py-20 md:py-28;
	}

	.trusty-container {
		@apply mx-auto max-w-7xl px-4 sm:px-6 lg:px-8;
	}

	/* Feature grid styling */
	.features-grid {
		@apply grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3;
	}

	/* Button styling */
	.btn {
		@apply inline-flex items-center justify-center rounded-button px-6 py-3 text-base font-medium transition-all duration-200;
	}

	.btn-primary {
		@apply bg-trustTeal text-white hover:bg-trustTeal/90 hover:shadow-md;
	}

	.btn-outline {
		@apply border border-white text-white hover:bg-white/10;
	}

	/* Testimonial styling */
	.testimonial-card {
		@apply rounded-xl bg-white p-6 shadow-md;
	}
</style>
