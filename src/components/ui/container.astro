---
import "@styles/global.css";
import "@styles/utilities.css";

type ContainerSize = "sm" | "md" | "lg" | "xl" | "full";

interface Props {
  /**
   * The size of the container
   */
  size?: ContainerSize;
  /**
   * Whether to center the container
   */
  centered?: boolean;
  /**
   * Whether to add padding to the container
   */
  padded?: boolean;
  /**
   * Additional classes to apply to the container
   */
  class?: string;
  /**
   * The HTML tag to use for the container
   */
  as?: "div" | "section" | "article" | "main" | "header" | "footer";
  /**
   * The id of the container
   */
  id?: string;
}

const props = Astro.props;
const size = (props.size ?? "lg") as ContainerSize;
const centered = props.centered ?? true;
const padded = props.padded ?? true;
const className = props.class ?? "";
const Tag = props.as ?? "div";
const id = props.id;

const sizeClasses: Record<ContainerSize, string> = {
  sm: "max-w-screen-sm",
  md: "max-w-screen-md",
  lg: "max-w-screen-lg",
  xl: "max-w-screen-xl",
  full: "max-w-full",
};

const containerClasses = [
  "w-full",
  centered && "mx-auto",
  padded && "px-4 sm:px-6 lg:px-8",
  sizeClasses[size],
  className,
]
  .filter(Boolean)
  .join(" ");
---

<Tag class={containerClasses} id={id}>
  <slot />
</Tag>

<style>
  /* Improve container text rendering */
  .container {
    @apply text-balance;
  }

  /* Improve container focus styles */
  .container:focus-within {
    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;
  }

  /* Improve container transitions */
  .container {
    @apply transition-all duration-200;
  }

  /* Improve container responsive behavior */
  @media (min-width: 640px) {
    .container {
      @apply px-6;
    }
  }

  @media (min-width: 1024px) {
    .container {
      @apply px-8;
    }
  }
</style>
