---
import "@styles/global.css";
import "@styles/utilities.css";

interface Props {
  /**
   * The type of button
   */
  type?: "button" | "submit" | "reset";
  /**
   * The variant of the button
   */
  variant?: "primary" | "secondary" | "outline" | "ghost" | "link";
  /**
   * The size of the button
   */
  size?: "sm" | "md" | "lg";
  /**
   * Whether the button is disabled
   */
  disabled?: boolean;
  /**
   * The icon to display before the text
   */
  icon?: string;
  /**
   * The icon to display after the text
   */
  iconAfter?: string;
  /**
   * Additional classes to apply to the button
   */
  class?: string;
  /**
   * The href to navigate to (if provided, renders as an anchor)
   */
  href?: string;
  /**
   * The target for the link (if href is provided)
   */
  target?: string;
  /**
   * The rel attribute for the link (if href is provided)
   */
  rel?: string;
  /**
   * The aria-label for accessibility
   */
  "aria-label"?: string;
}

const {
  type = "button",
  variant = "primary",
  size = "md",
  disabled = false,
  icon,
  iconAfter,
  class: className = "",
  href,
  target,
  rel,
  "aria-label": ariaLabel,
} = Astro.props;

const baseClasses = [
  "btn",
  "inline-flex items-center justify-center gap-2",
  "font-medium transition-colors",
  "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
  "disabled:pointer-events-none disabled:opacity-50",
];

const variantClasses = {
  primary: "bg-primary text-primary-foreground hover:bg-primary/90",
  secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  outline:
    "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  ghost: "hover:bg-accent hover:text-accent-foreground",
  link: "text-primary underline-offset-4 hover:underline",
};

const sizeClasses = {
  sm: "h-9 px-3 text-xs",
  md: "h-10 px-4 py-2 text-sm",
  lg: "h-11 px-8 text-base",
};

const buttonClasses = [
  ...baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className,
].join(" ");

const Tag = href ? "a" : "button";
const attrs = {
  ...(href ? { href, target, rel } : { type }),
  class: buttonClasses,
  disabled,
  "aria-label": ariaLabel,
};
---

<Tag {...attrs}>
  {
    icon && (
      <span class="inline-block" aria-hidden="true">
        <Fragment set:html={icon} />
      </span>
    )
  }

  <slot />

  {
    iconAfter && (
      <span class="inline-block" aria-hidden="true">
        <Fragment set:html={iconAfter} />
      </span>
    )
  }
</Tag>

<style>
  /* Improve button text rendering */
  .btn {
    @apply text-balance;
  }

  /* Improve focus styles */
  .btn:focus-visible {
    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;
  }

  /* Improve hover states */
  .btn:not(:disabled):hover {
    @apply transition-colors duration-200;
  }

  /* Improve active states */
  .btn:not(:disabled):active {
    @apply scale-[0.98] transition-transform duration-100;
  }

  /* Improve disabled states */
  .btn:disabled {
    @apply cursor-not-allowed opacity-50;
  }

  /* Improve loading states */
  .btn.loading {
    @apply relative text-transparent transition-none hover:text-transparent;
  }

  .btn.loading::after {
    content: "";
    @apply absolute inset-0 flex items-center justify-center;
    @apply border-2 border-current border-t-transparent rounded-full;
    @apply animate-spin;
  }
</style>
