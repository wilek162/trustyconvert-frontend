---
import "@styles/global.css";
import "@styles/utilities.css";

interface Props {
  /**
   * The type of input
   */
  type?: "text" | "email" | "password" | "number" | "tel" | "url" | "search";
  /**
   * The name of the input
   */
  name?: string;
  /**
   * The id of the input
   */
  id?: string;
  /**
   * The value of the input
   */
  value?: string;
  /**
   * The placeholder text
   */
  placeholder?: string;
  /**
   * Whether the input is required
   */
  required?: boolean;
  /**
   * Whether the input is disabled
   */
  disabled?: boolean;
  /**
   * Whether the input is readonly
   */
  readonly?: boolean;
  /**
   * The minimum length of the input
   */
  minlength?: number;
  /**
   * The maximum length of the input
   */
  maxlength?: number;
  /**
   * The pattern to validate the input
   */
  pattern?: string;
  /**
   * The title of the input (shown on hover)
   */
  title?: string;
  /**
   * The autocomplete attribute
   */
  autocomplete?: string;
  /**
   * The aria-label for accessibility
   */
  "aria-label"?: string;
  /**
   * The aria-describedby for accessibility
   */
  "aria-describedby"?: string;
  /**
   * Additional classes to apply to the input
   */
  class?: string;
  /**
   * The error message to display
   */
  error?: string;
  /**
   * The label text
   */
  label?: string;
  /**
   * The helper text
   */
  helper?: string;
  /**
   * The icon to display before the input
   */
  icon?: string;
  /**
   * The icon to display after the input
   */
  iconAfter?: string;
}

const {
  type = "text",
  name,
  id,
  value,
  placeholder,
  required = false,
  disabled = false,
  readonly = false,
  minlength,
  maxlength,
  pattern,
  title,
  autocomplete,
  "aria-label": ariaLabel,
  "aria-describedby": ariaDescribedby,
  class: className = "",
  error,
  label,
  helper,
  icon,
  iconAfter,
} = Astro.props;

const inputId = id ?? name;
const errorId = inputId ? `${inputId}-error` : undefined;
const helperId = inputId ? `${inputId}-helper` : undefined;

const inputClasses = [
  "form-input",
  "w-full",
  icon && "pl-10",
  iconAfter && "pr-10",
  error && "border-destructive focus-visible:ring-destructive",
  className,
]
  .filter(Boolean)
  .join(" ");

const wrapperClasses = ["relative", "w-full"].join(" ");
---

<div class={wrapperClasses}>
  {
    label && (
      <label
        for={inputId}
        class="form-label mb-2 block text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
      >
        {label}
        {required && <span class="text-destructive ml-1">*</span>}
      </label>
    )
  }

  <div class="relative">
    {
      icon && (
        <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-muted-foreground">
          <Fragment set:html={icon} />
        </div>
      )
    }

    <input
      type={type}
      name={name}
      id={inputId}
      value={value}
      placeholder={placeholder}
      required={required}
      disabled={disabled}
      readonly={readonly}
      minlength={minlength}
      maxlength={maxlength}
      pattern={pattern}
      title={title}
      autocomplete={autocomplete}
      aria-label={ariaLabel}
      aria-describedby={[errorId, helperId, ariaDescribedby]
        .filter(Boolean)
        .join(" ") || undefined}
      aria-invalid={error ? "true" : undefined}
      class={inputClasses}
    />

    {
      iconAfter && (
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground">
          <Fragment set:html={iconAfter} />
        </div>
      )
    }
  </div>

  {
    error && (
      <p id={errorId} class="mt-2 text-sm text-destructive" role="alert">
        {error}
      </p>
    )
  }

  {
    helper && !error && (
      <p id={helperId} class="mt-2 text-sm text-muted-foreground">
        {helper}
      </p>
    )
  }
</div>

<style>
  /* Improve input text rendering */
  .form-input {
    @apply text-balance;
  }

  /* Improve input focus styles */
  .form-input:focus-visible {
    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;
  }

  /* Improve input transitions */
  .form-input {
    @apply transition-all duration-200;
  }

  /* Improve input disabled styles */
  .form-input:disabled {
    @apply cursor-not-allowed opacity-50;
  }

  /* Improve input placeholder styles */
  .form-input::placeholder {
    @apply text-muted-foreground/50;
  }

  /* Improve input number styles */
  .form-input[type="number"] {
    -moz-appearance: textfield;
  }

  .form-input[type="number"]::-webkit-outer-spin-button,
  .form-input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Improve input search styles */
  .form-input[type="search"] {
    -webkit-appearance: none;
  }

  .form-input[type="search"]::-webkit-search-decoration,
  .form-input[type="search"]::-webkit-search-cancel-button,
  .form-input[type="search"]::-webkit-search-results-button,
  .form-input[type="search"]::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }
</style>
