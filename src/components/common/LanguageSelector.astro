---
import { LANGUAGES, DEFAULT_LANGUAGE, formatLocalizedPath } from '@/lib/i18n/config'

interface Props {
	currentLang?: string
	class?: string
}

const { currentLang = DEFAULT_LANGUAGE.code, class: className = '' } = Astro.props

// Get current path without language prefix
const currentPath = Astro.url.pathname
const segments = currentPath.split('/').filter(Boolean)
let pathWithoutLang = currentPath

// Check if the first segment is a language code
if (segments.length > 0 && LANGUAGES.some((lang) => lang.code === segments[0])) {
	pathWithoutLang = '/' + segments.slice(1).join('/')
}

// If path is empty, use root
if (pathWithoutLang === '') pathWithoutLang = '/'
---

<div class={`language-selector relative ${className}`}>
	<button
		id="language-dropdown-button"
		class="flex items-center space-x-1 rounded-md border border-border bg-background px-3 py-2 text-sm hover:bg-muted"
		aria-expanded="false"
		aria-haspopup="true"
	>
		<span class="mr-1">
			{LANGUAGES.find((lang) => lang.code === currentLang)?.flag}
		</span>
		<span class="hidden sm:inline">
			{LANGUAGES.find((lang) => lang.code === currentLang)?.name}
		</span>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="16"
			height="16"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="ml-1 h-4 w-4"
		>
			<polyline points="6 9 12 15 18 9"></polyline>
		</svg>
	</button>

	<div
		id="language-dropdown"
		class="absolute right-0 z-10 mt-2 hidden w-48 origin-top-right rounded-md border border-border bg-background shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="language-dropdown-button"
		tabindex="-1"
	>
		<div class="py-1" role="none">
			{
				LANGUAGES.map((lang) => (
					<a
						href={formatLocalizedPath(pathWithoutLang, lang.code)}
						class={`flex items-center px-4 py-2 text-sm hover:bg-muted ${
							lang.code === currentLang
								? 'bg-muted font-medium text-foreground'
								: 'text-muted-foreground'
						}`}
						role="menuitem"
						tabindex="-1"
						hreflang={lang.code}
					>
						<span class="mr-2">{lang.flag}</span>
						{lang.name}
					</a>
				))
			}
		</div>
	</div>
</div>

<script>
	// Add client-side interactivity for the language selector
	document.addEventListener('DOMContentLoaded', () => {
		const button = document.getElementById('language-dropdown-button')
		const dropdown = document.getElementById('language-dropdown')

		if (!button || !dropdown) return

		// Toggle dropdown
		button.addEventListener('click', (e) => {
			e.stopPropagation()
			const expanded = button.getAttribute('aria-expanded') === 'true'
			button.setAttribute('aria-expanded', (!expanded).toString())
			dropdown.classList.toggle('hidden')
		})

		// Close dropdown when clicking outside
		document.addEventListener('click', () => {
			button.setAttribute('aria-expanded', 'false')
			dropdown.classList.add('hidden')
		})

		// Prevent dropdown from closing when clicking inside it
		dropdown.addEventListener('click', (e) => {
			e.stopPropagation()
		})
	})
</script>

